apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-frontend
spec:
  replicas: {{ .Values.frontend.replicas }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ .Release.Name }}-frontend
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-frontend
    spec:
      imagePullSecrets:
        - name: regcred
      nodeSelector:
        appNodes: "true"
      containers:
      - name: cfa
        image: "{{ tpl .Values.global.imageUrls.frontendImageUrl . }}:{{ .Values.frontendImage.image.frontendImageTag }}"
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            {{- with .Values.frontend.resources }}
            memory: {{ .memory }}
            cpu: {{ .cpu }}
            {{- end }}
        ports:
          - containerPort: {{ .Values.frontend.ingress.servicePort }}
        env:
          - name: VITE_QUALYTICS_DNS
            value: {{ tpl .Values.global.dnsRecord . | quote }}
          - name: VITE_QUALYTICS_API_LOCATION
            value: "https://$(VITE_QUALYTICS_DNS)/api"
          - name: VITE_QUALYTICS_AUTH0_LOGOUT_REDIRECT
            value: "https://$(VITE_QUALYTICS_DNS)"
          - name: VITE_QUALYTICS_AUTH0_DOMAIN
            value: {{ .Values.secrets.auth0.auth0_domain | quote }}
          - name: VITE_QUALYTICS_AUTH0_CLIENTID
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: auth0_spa_client_id
          - name: VITE_QUALYTICS_AUTH0_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: auth0_audience
          - name: VITE_QUALYTICS_AUTH0_ORGANIZATION
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: auth0_organization

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-frontend-service
  labels:
    app: {{ .Release.Name }}-frontend-service
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.frontend.ingress.servicePort }}
      targetPort: {{ .Values.frontend.ingress.servicePort }}
      protocol: TCP
      name: http
  selector:
    app: {{ .Release.Name }}-frontend

{{- if ( eq .Values.ingress.enabled true ) }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-frontend-ingress
  annotations:
    nginx.ingress.kubernetes.io/use-regex: 'true'
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/proxy-redirect-from: 'http'
    nginx.ingress.kubernetes.io/proxy-redirect-to: 'https'
    cert-manager.io/cluster-issuer: "letsencrypt"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ tpl .Values.global.dnsRecord . | quote }}
      secretName: frontend-tls-cert
  rules:
    - host: {{ tpl .Values.global.dnsRecord . | quote }}
      http:
        paths:
          - path: {{ .Values.frontend.ingress.path | quote }}
            pathType: Prefix
            backend:
              service:
                name: {{ .Release.Name }}-frontend-service
                port:
                  number: {{ .Values.frontend.ingress.servicePort }}
{{- end }}