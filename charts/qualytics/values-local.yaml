######------------------------------------------------------------
# Qualytics default values
######------------------------------------------------------------

#--------------------------------------------------------------------------------
# Dependencies
#--------------------------------------------------------------------------------
spark-operator:
  enabled: true
  webhook:
    enable: true
    port: 443
    initAnnotations:
      "helm.sh/hook": pre-install
      "helm.sh/hook-weight": "50"
    cleanupAnnotations:
      "helm.sh/hook": pre-delete
      "helm.sh/hook-delete-policy": hook-succeeded
  # nodeSelector:
  #   appNodes: "true"
  # tolerations:
  #   - key: appNodes
  #     operator: Equal
  #     value: "true"
  #     effect: NoSchedule

ingress-nginx:
  enabled: false
  controller:
    # nodeSelector:
    #   appNodes: "true"
    # tolerations:
    #   - key: appNodes
    #     operator: Equal
    #     value: "true"
    #     effect: NoSchedule
    admissionWebhooks:
      enabled: true
      timeoutSeconds: 30
    service:
      type: LoadBalancer
      externalTrafficPolicy: Local

cert-manager:
  enabled: false
  installCRDs: "true"
  # nodeSelector:
  #   appNodes: "true"
  # tolerations:
  #   - key: appNodes
  #     operator: Equal
  #     value: "true"
  #     effect: NoSchedule

#--------------------------------------------------------------------------------
# Ingress Nginx & Cert-manager
#--------------------------------------------------------------------------------
ingress:
  enabled: false
  certificates:
    registeredEmail: "devops@qualytics.co"

#--------------------------------------------------------------------------------
# Global values
#--------------------------------------------------------------------------------

# Keep this for dns records and other specifics that are used across the entire app
global:
  platform: "local"
  dnsRecord: "changeme.qualytics.io"
  imageUrls:
    firewallImageUrl: "artifactory.qualytics.io/docker/firewall-prod"
    hubImageUrl: "artifactory.qualytics.io/docker/hub-prod"
    frontendImageUrl: "artifactory.qualytics.io/docker/frontend-prod"

# Storage classes
storageClass:
  create: false
  name: ""

# Node scheduling
tolerations:
  enabled: false
selectors:
  enabled: false

# App image tags
firewallImage:
  image:
    firewallImageTag: "latest"
hubImage:
  image:
    hubImageTag: "latest"
frontendImage:
  image:
    frontendImageTag: "latest"

# The following secrets are required
secrets:
  auth0:
    auth0_domain: qualytics-dev.us.auth0.com
    auth0_audience: develop-api
    auth0_organization: org_develop
    auth0_spa_client_id: spa_client_id
    auth0_client_id: m2m_client_id
    auth0_client_secret: m2m_client_secret
    auth0_user_client_id: m2m_user_client_id
    auth0_user_client_secret: m2m_user_client_secret
  postgres:
    connection_url: postgres:postgres@postgres:5432/surveillence_hub
    secrets_passphrase: ChangeMe!
  smtp:
    smtp_sender_user: smtp_user
    smtp_sender_password: smtp_password
  rabbitmq:
    rabbitmq_password: ChangeMe!

#--------------------------------------------------------------------------------
# Firewall configuration
#--------------------------------------------------------------------------------
firewall:
  sparkVersion: "3.4.1"
  eventLog: "false"
  useCache: "true"
  useVolumes: false
  threadPoolParallelism: -1
  maxExecutors: 1
  numCoresPerExecutor: 1
  maxMemoryPerExecutor: 10
  driver:
    cores: 1
    coreLimit: "1500m"
    memory: "2000m"
  dynamicAllocation:
    enabled: false
    initialExecutors: 0
    minExecutors: 0
    maxExecutors: 1
  executor:
    ## Note that if dynamic allocation is enabled, the number of executors to request initially is set to the biggest
    # of .spec.dynamicAllocation.initialExecutors and .spec.executor.instances if both are set.
    instances: 1
    cores: 1
    coreLimit: "1500m"
    memory: "2000m"

#--------------------------------------------------------------------------------
# Hub configuration
#--------------------------------------------------------------------------------
hub:
  replicas: 1
  ingress:
    path: "/api/?(.*)"
    servicePort: "8000"
  resources:
    memory: "1Gi"
    cpu: "1000m"
  smtp:
    enabled: false
    server: "email-smtp.us-east-1.amazonaws.com"
    sender: "no-reply@qualytics.co"
    port: "465"

hubCmd:
  resources:
    memory: "256Mi"
    cpu: "200m"

hubUserKeys:
  enabled: true

#--------------------------------------------------------------------------------
# Frontend configuration
#--------------------------------------------------------------------------------
frontend:
  replicas: 1
  ingress:
    path: "/?(.*)"
    servicePort: "8080"
  resources:
    memory: "256Mi"
    cpu: "200m"

#--------------------------------------------------------------------------------
# Postgres
#--------------------------------------------------------------------------------
# Set values for cluster install of Postgres
postgres:
  enabled: true
  pvc:
    storageSize: "10Gi"
    backupVolumeStorageSize: "5Gi"
  image:
    imageUrl: "artifactory.qualytics.io/docker/postgres"
    imageTag: "14"
  resources:
    memory: "4Gi"
    cpu: "1000m"

#--------------------------------------------------------------------------------
# RabbitMQ
#--------------------------------------------------------------------------------
rabbitmq:
  pvc:
    storageSize: "10Gi"
  image:
    imageUrl: "artifactory.qualytics.io/docker/rabbitmq"
    imageTag: "3.12-management"
  resources:
    memory: "1Gi"
    cpu: "1000m"

#--------------------------------------------------------------------------------
# Busybox
#--------------------------------------------------------------------------------
busybox:
  image:
    imageUrl: "artifactory.qualytics.io/docker/busybox"
    imageTag: "latest"