suite: test secrets configuration
templates:
  - secrets.yaml
tests:
  # Basic secrets functionality
  - it: should create qualytics-creds secret
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: qualytics-creds
      - equal:
          path: type
          value: Opaque

  # Auth0 secrets tests
  - it: should create Auth0 secrets when authType is AUTH0
    set:
      global.authType: "AUTH0"
      secrets.auth0.auth0_audience: "test-audience"
      secrets.auth0.auth0_organization: "org_test"
      secrets.auth0.auth0_spa_client_id: "spa_test_client"
    asserts:
      - exists:
          path: data.auth0_audience
      - exists:
          path: data.auth0_organization  
      - exists:
          path: data.auth0_spa_client_id
      - notExists:
          path: data.oidc_scopes

  # OIDC secrets tests
  - it: should create OIDC secrets when authType is OIDC
    set:
      global.authType: "OIDC"
      secrets.oidc.oidc_scopes: "openid profile email"
      secrets.oidc.oidc_authorization_endpoint: "https://auth.example.com/auth"
      secrets.oidc.oidc_token_endpoint: "https://auth.example.com/token"
      secrets.oidc.oidc_client_id: "oidc_client"
      secrets.oidc.oidc_client_secret: "oidc_secret"
    asserts:
      - exists:
          path: data.oidc_scopes
      - exists:
          path: data.oidc_authorization_endpoint
      - exists:
          path: data.oidc_token_endpoint
      - exists:
          path: data.oidc_client_id
      - exists:
          path: data.oidc_client_secret
      - notExists:
          path: data.auth0_audience

  # System secrets tests
  - it: should always create required system secrets
    set:
      secrets.auth.jwt_signing_secret: "custom_jwt_secret"
      secrets.postgres.secrets_passphrase: "custom_passphrase"
      secrets.rabbitmq.rabbitmq_password: "custom_rabbitmq_pass"
    asserts:
      - exists:
          path: data.jwt_signing_secret
      - exists:
          path: data.secrets_passphrase
      - exists:
          path: data.rabbitmq_password
      - exists:
          path: data.connection_url

  # SMTP secrets tests
  - it: should create SMTP secrets when configured
    set:
      secrets.smtp.smtp_sender_user: "smtp_user"
      secrets.smtp.smtp_sender_password: "smtp_pass"
    asserts:
      - exists:
          path: data.smtp_sender_user
      - exists:
          path: data.smtp_sender_password

  # Database connection secrets tests
  - it: should create database connection URL
    set:
      secrets.postgres.secrets_passphrase: "db_secret"
    asserts:
      - exists:
          path: data.connection_url

  # Mixed authentication tests
  - it: should handle switching from AUTH0 to OIDC
    set:
      global.authType: "OIDC"
      secrets.oidc.oidc_scopes: "openid email"
      secrets.oidc.oidc_client_id: "oidc_test"
    asserts:
      - exists:
          path: data.oidc_scopes
      - exists:
          path: data.oidc_client_id
      - notExists:
          path: data.auth0_audience

  # Comprehensive secrets test
  - it: should create all secret types when fully configured
    set:
      global.authType: "AUTH0"
      secrets.auth0.auth0_audience: "full_test_audience"
      secrets.auth0.auth0_organization: "org_full_test"
      secrets.auth0.auth0_spa_client_id: "spa_full_test"
      secrets.auth.jwt_signing_secret: "full_jwt_secret"
      secrets.postgres.secrets_passphrase: "full_db_secret"
      secrets.rabbitmq.rabbitmq_password: "full_rabbitmq_pass"
      secrets.smtp.smtp_sender_user: "full_smtp_user"
      secrets.smtp.smtp_sender_password: "full_smtp_pass"
    asserts:
      - equal:
          path: metadata.name
          value: qualytics-creds
      - exists:
          path: data.auth0_audience
      - exists:
          path: data.jwt_signing_secret
      - exists:
          path: data.secrets_passphrase
      - exists:
          path: data.rabbitmq_password
      - exists:
          path: data.smtp_sender_user