{{- if ( eq .Values.postgres.enabled true ) }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-snapshots-claim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  {{- if and ( eq .Values.storageClass.create false ) (ne ( .Values.storageClass.name ) "") }}
  storageClassName: {{ .Values.storageClass.name }}
  {{- else if and ( eq .Values.storageClass.create true ) ( eq .Values.global.platform "aws" ) }}
  storageClassName: aws
  {{- else if and ( eq .Values.storageClass.create true ) ( eq .Values.global.platform "gcp" ) }}
  storageClassName: gcp-fast
  {{- else if and ( eq .Values.storageClass.create true ) ( eq .Values.global.platform "azure" ) }}
  storageClassName: azure-fast
  {{- end }}
  resources:
    requests:
      storage: {{ .Values.postgres.pvc.backupVolumeStorageSize }}

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-snapshotter
  labels:
    role: backups
spec:
  schedule: "0 0 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          imagePullSecrets:
            - name: regcred
          {{- if ( eq .Values.selectors.enabled true ) }}
          nodeSelector:
            appNodes: "true"
          {{- end }}
          {{- if ( eq .Values.tolerations.enabled true ) }}
          tolerations:
            - key: appNodes
              operator: Equal
              value: "true"
              effect: NoSchedule
          {{- end }}
          containers:
          - name: snapshotter
            env:
            - name: POSTGRES_CONNECTION_URL
              valueFrom:
                secretKeyRef:
                  name: qualytics-creds
                  key: connection_url
            - name: DATABASE_URL
              value: postgresql://$(POSTGRES_CONNECTION_URL)
            image: "{{ tpl .Values.postgres.image.imageUrl . }}:{{ .Values.postgres.image.imageTag }}"
            imagePullPolicy: IfNotPresent
            command:
            - "/bin/sh"
            - "-c"
            - |
              TIMESTAMP=$( date +%Y-%-m-%d.%H%M )
              ARCHIVE="pg_dump.${TIMESTAMP}.sql"
              pg_dump $DATABASE_URL > ./${ARCHIVE}
              gzip -9 ./${ARCHIVE}
              mv ${ARCHIVE}.gz /mnt/data/postgres/${ARCHIVE}.gz
              ls /mnt/data/postgres/
              # Remove backup files older than one month
              find /mnt/data/postgres -name "pg_dump.*.sql.gz" -type f -mtime +30 -exec rm {} \;
            volumeMounts:
            - name: postgres-snapshots-volume
              mountPath: /mnt/data/postgres
          volumes:
            - name: postgres-snapshots-volume
              persistentVolumeClaim:
                claimName: postgres-snapshots-claim
          restartPolicy: OnFailure
{{- end }}
