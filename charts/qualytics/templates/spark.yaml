apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: {{ .Release.Name }}-spark
spec:
  type: Scala
  mode: cluster
  image: "{{ tpl .Values.global.imageUrls.firewallImageUrl . }}:{{ .Values.firewallImage.image.firewallImageTag }}"
  imagePullPolicy: IfNotPresent
  imagePullSecrets:
    - regcred
  restartPolicy:
    type: Always
    onFailureRetries: 1000
    onFailureRetryInterval: 5
    onSubmissionFailureRetries: 1000
    onSubmissionFailureRetryInterval: 5
  mainClass: io.qualytics.firewall.SparkMothership
  mainApplicationFile: "local:///opt/spark/jars/firewall-core.jar"
  sparkVersion: {{ .Values.firewall.sparkVersion }}
  sparkConf:
    spark.eventLog.enabled: {{ .Values.firewall.eventLog | quote }}
    spark.kubernetes.memoryOverheadFactor: {{ .Values.firewall.memoryOverheadFactor | quote }}
    spark.kubernetes.submission.connectionTimeout: "480000"
    spark.kubernetes.submission.requestTimeout: "480000"
    spark.kubernetes.driver.connectionTimeout: "480000"
    spark.kubernetes.driver.requestTimeout: "480000"
  {{- if .Values.firewall.useVolumes }}
  volumes:
    {{- range $i := until (int .Values.firewall.numVolumes) }}
    - name: "spark-local-dir-{{ add1 $i }}"
      {{- if ( eq $.Values.global.platform "aws" ) }}
      hostPath:
        path: "/mnt/disks/nvme{{ add1 $i }}n1/spark-local-dir-{{ add1 $i }}"
      {{- else if ( eq $.Values.global.platform "gcp" ) }}
      hostPath:
        path: "/mnt/disks/ssd{{ $i }}/spark-local-dir-{{ add1 $i }}"
      {{- else }}
      emptyDir: {}
      {{- end }}
    {{- end }}
  {{- end }}
  driver:
{{- $resources := .Values.firewall -}}
    {{- with $resources.driver }}
    cores: {{ .cores }}
    coreLimit: {{ .coreLimit }}
    memory: {{ .memory }}
    {{- end }}
    {{- if .Values.driverNodeSelector }}
    nodeSelector:
      {{- toYaml .Values.driverNodeSelector | nindent 6 }}
    {{- end }}
    {{- if .Values.tolerations.driverNodeTolerations }}
    tolerations:
      {{- toYaml .Values.tolerations.driverNodeTolerations | nindent 6 }}
    {{- end }}
    javaOptions:
      "-Divy.cache.dir=/tmp
       -Divy.home=/tmp
       -Dlog4j.configuration=file:/opt/spark/log4j.properties
       -Dconfig.resource=prod.conf
       -Djava.library.path=/opt/spark/libs/
       -Duser.timezone=UTC
       -XX:+UseG1GC -XX:G1HeapRegionSize=32M -XX:InitiatingHeapOccupancyPercent=35"
#--------------------------------------------------------------------------------
# Environments that require a proxy (Http, Socks, etc..) for egress
#--------------------------------------------------------------------------------
# The simplest solution is to solve for this outside of Qualytics. For example, using
#   an istio egress configured for your proxy or another similar gateway device.
#
# However, if proxy-aware applications are required, the javaOptions string above can be
#  updated to hold the relevant proxy information according to the JRE v17 spec:
#    https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/net/doc-files/net-properties.html
#
#  If additionally, authentication is required for an http(s) proxy, use the following additional
#   properties not documented on the page linked above:
#  -Dhttps.proxyUser=your_username
#  -Dhttps.proxyPassword=your_password
#  -Dhttp.proxyUser=your_username
#  -Dhttp.proxyPassword=your_password
#
    env:
      - name: MOTHERSHIP_RABBIT_HOST
        value: "{{ .Release.Name }}-rabbitmq"
      - name: MOTHERSHIP_RABBIT_USER
        value: "user"
      - name: MOTHERSHIP_RABBIT_PASS
        valueFrom:
          secretKeyRef:
            name: qualytics-creds
            key: rabbitmq_password
    {{- if gt ( .Values.firewall.threadPoolParallelism | int ) 0 }}
      - name: MOTHERSHIP_THREAD_POOL_PARALLELISM
        value: {{ .Values.firewall.threadPoolParallelism | quote }}
    {{- end }}
      - name: MOTHERSHIP_USE_CACHE
        value: {{ .Values.firewall.useCache | quote }}
      - name: MOTHERSHIP_MAX_EXECUTORS
        value: {{ .Values.firewall.maxExecutors | int | quote }}
      - name: MOTHERSHIP_NUM_CORES_PER_EXECUTOR
        value: {{ .Values.firewall.numCoresPerExecutor | int | quote  }}
      - name: MOTHERSHIP_MAX_MEMORY_PER_EXECUTOR
        value: {{ .Values.firewall.maxMemoryPerExecutor | int | quote  }}
      - name: MOTHERSHIP_LIBPOSTAL_DATA_PATH
        value: {{ .Values.firewall.libpostalDataPath | quote  }}
    labels:
      version: {{ .Values.firewall.sparkVersion }}
    serviceAccount: {{ .Release.Name }}-spark
  dynamicAllocation:
    {{- with $resources.dynamicAllocation }}
    enabled: true
    initialExecutors: {{ .initialExecutors }}
    minExecutors: {{ .minExecutors }}
    maxExecutors: {{ .maxExecutors }}
    {{- end }}
  executor:
    {{- with $resources.executor }}
    instances: {{ .instances }}
    cores: {{ .cores }}
    coreLimit: {{ .coreLimit }}
    memory: {{ .memory }}
    {{- end }}
    javaOptions:
      "-Dlog4j.configuration=file:/opt/spark/log4j.properties 
       -Djava.library.path=/opt/spark/libs/
       -Duser.timezone=UTC
       -XX:+UseG1GC -XX:G1HeapRegionSize=32M -XX:InitiatingHeapOccupancyPercent=35"
    labels:
      version: {{ .Values.firewall.sparkVersion }}
    {{- if .Values.executorNodeSelector }}
    nodeSelector:
      {{- toYaml .Values.executorNodeSelector | nindent 6 }}
    {{- end }}
    {{- if .Values.tolerations.executorNodeTolerations }}
    tolerations:
      {{- toYaml .Values.tolerations.executorNodeTolerations | nindent 6 }}
    {{- end }}
    {{- if .Values.firewall.useVolumes }}
    volumeMounts:
      {{- range $i := until (int .Values.firewall.numVolumes) }}
      - name: "spark-local-dir-{{ add1 $i }}"
        mountPath: "/tmp/spark-local-dir-{{ add1 $i }}"
      {{- end }}
    initContainers:
    - name: init-spark-local-dir
      image: "{{ tpl .Values.busybox.image.imageUrl . }}:{{ .Values.busybox.image.imageTag }}"
      imagePullPolicy: IfNotPresent
      command: ['sh', '-c', 'chmod 777 /tmp/spark-local-dir-*']
      securityContext:
        runAsUser: 0
      volumeMounts:
      {{- range $i := until (int .Values.firewall.numVolumes) }}
      - name: "spark-local-dir-{{ add1 $i }}"
        mountPath: "/tmp/spark-local-dir-{{ add1 $i }}"
      {{- end }}
    {{- end }}
