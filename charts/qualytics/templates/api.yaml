apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-api
spec:
  replicas: {{ .Values.controlplane.replicas }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ .Release.Name }}-api
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-api
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if .Values.appNodeSelector }}
      nodeSelector:
        {{- toYaml .Values.appNodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations.appNodeTolerations }}
      tolerations:
        {{- toYaml .Values.tolerations.appNodeTolerations | nindent 8 }}
      {{- end }}
      containers:
      - name: api
        image: "{{ tpl .Values.global.imageUrls.controlplaneImageUrl . }}:{{ .Values.controlplaneImage.image.controlplaneImageTag }}"
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash","-c"]
        args: ["python /app/hub_api.py"]
        resources:
          requests:
            {{- with .Values.controlplane.resources }}
            memory: {{ .memory }}
            cpu: {{ .cpu }}
            {{- end }}
        ports:
          - containerPort: {{ .Values.controlplane.ingress.servicePort }}
        env:
          - name: APP_AUTO_RELOAD
            value: "False"
          - name: APP_CLOUD_PLATFORM
            value: {{ .Values.global.platform | quote }}
          - name: APP_DEPLOYMENT_SIZE
            value: {{ include "qualytics.global.size" . | quote }}
          - name: CORS_ORIGINS
            value: {{ tpl .Values.global.dnsRecord . | quote }}
          - name: POSTGRES_CONNECTION_URL
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: connection_url
          - name: DATABASE_URL
            value: "postgresql+psycopg2://$(POSTGRES_CONNECTION_URL)"
          {{- if ( eq .Values.controlplane.smtp.enabled true ) }}
          - name: SMTP_SERVER
            value: {{ .Values.controlplane.smtp.server | quote }}
          - name: SMTP_PORT
            value: {{ .Values.controlplane.smtp.port | quote }}
          - name: SMTP_SENDER_EMAIL
            value: {{ .Values.controlplane.smtp.sender | quote }}
          {{- if and .Values.secrets.smtp.smtp_sender_user .Values.secrets.smtp.smtp_sender_password }}
          - name: SMTP_SENDER_USER
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: smtp_sender_user
          - name: SMTP_SENDER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: smtp_sender_password
         {{- end }}
         {{- end }}
          - name: API_ROOT_PATH
            value: /api
          - name: API_ROOT_URL
            value: {{ printf "http://%s-api-service:8000$(API_ROOT_PATH)" .Release.Name }}
          - name: SECRETS_PASSPHRASE
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: secrets_passphrase
          - name: JWT_SIGNING_SECRET
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: jwt_signing_secret
          {{- if ( eq .Values.global.authType "OIDC" ) }}
          - name: API_AUTH
            value: OIDC
          - name: OIDC_REDIRECT_URL
            value: {{ printf "https://%s/callback" .Values.global.dnsRecord }}
          - name: OIDC_SCOPES
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_scopes
          - name: OIDC_AUTHORIZATION_ENDPOINT
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_authorization_endpoint
          - name: OIDC_TOKEN_ENDPOINT
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_token_endpoint
          - name: OIDC_USERINFO_ENDPOINT
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_userinfo_endpoint
          - name: OIDC_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_client_id
          - name: OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_client_secret
          - name: OIDC_USER_ID_KEY
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_user_id_key
          - name: OIDC_USER_EMAIL_KEY
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_user_email_key
          - name: OIDC_USER_NAME_KEY
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_user_name_key
          - name: OIDC_USER_FNAME_KEY
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_user_fname_key
          - name: OIDC_USER_LNAME_KEY
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_user_lname_key
          - name: OIDC_USER_PICTURE_KEY
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_user_picture_key
          - name: OIDC_USER_PROVIDER_KEY
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: oidc_user_provider_key
          - name: OIDC_ALLOW_INSECURE_HTTP
            value: {{ .Values.secrets.oidc.oidc_allow_insecure_transport | quote }}
          {{- if .Values.secrets.oidc.oidc_signer_pem_url }}
          - name: OIDC_SIGNER_PEM_URL
            value: {{ .Values.secrets.oidc.oidc_signer_pem_url | quote }}
          {{- end }}
          {{- else }}
          - name: API_AUTH
            value: AUTH0
          - name: AUTH0_DOMAIN
            value: {{ .Values.secrets.auth0.auth0_domain | quote }}
          - name: AUTH0_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: auth0_audience
          - name: AUTH0_ORGANIZATION
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: auth0_organization
          {{- end }}
          - name: RABBIT_MQ_HOST
            value: "{{ .Release.Name }}-rabbitmq"
          {{- if eq .Values.rabbitmq.tls.enabled false }}
          - name: RABBIT_MQ_PORT
            value: "5672"
          - name: RABBIT_MQ_USE_TLS
            value: "false"
           {{- end }} 
          - name: RABBIT_MQ_USER
            value: "user"
          - name: RABBIT_MQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: rabbitmq_password
          - name: VERIFY_CERTIFICATE_SIGNERS
            value: {{ .Values.controlplane.egress.verifyTLSCertificates | quote }}

#--------------------------------------------------------------------------------
# Environments that require a proxy (Http, Socks, etc..) for egress
#--------------------------------------------------------------------------------
# The simplest solution is to solve for this outside of Qualytics. For example, using
#   an istio egress configured for your proxy or another similar gateway device.
#
# However, if proxy-aware applications are required, the HTTPS_PROXY value can be set
#  below using PROXY_PROTOCOL of either: "https" or "socks5h"
#
#
          # - name: HTTPS_PROXY
          #   value: "<PROXY_PROTOCOL>://<USERNAME>:<PASSWORD>@<PROXY_IP_ADDRESS>:<PROXY_PORT>"


---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-api-service
  labels:
    app: {{ .Release.Name }}-api-service
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.controlplane.ingress.servicePort }}
      targetPort: {{ .Values.controlplane.ingress.servicePort }}
      protocol: TCP
      name: http
  selector:
    app: {{ .Release.Name }}-api
