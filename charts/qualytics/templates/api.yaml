apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-api
spec:
  replicas: {{ .Values.hub.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-api
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-api
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if ( eq .Values.selectors.enabled true ) }}
      nodeSelector:
        appNodes: "true"
      {{- end }}
      {{- if ( eq .Values.tolerations.enabled true ) }}
      tolerations:
        - key: appNodes
          operator: Equal
          value: "true"
          effect: NoSchedule
      {{- end }}
      containers:
      - name: api
        image: "{{ tpl .Values.global.imageUrls.hubImageUrl . }}:{{ .Values.hubImage.image.hubImageTag | toString }}"
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash","-c"]
        args: ["python /app/hub_api.py"]
        resources:
          requests:
            {{- with .Values.hub.resources }}
            memory: {{ .memory }}
            cpu: {{ .cpu }}
            {{- end }}
        ports:
          - containerPort: {{ .Values.hub.ingress.servicePort }}
        env:
          - name: APP_AUTO_RELOAD
            value: "False"
          - name: CORS_ORIGINS
            value: {{ tpl .Values.global.dnsRecord . | quote }}
          {{- if ( eq .Values.postgres.enabled true ) }}
          - name: POSTGRES_CONNECTION_URL
            value: "postgres:postgres@{{ .Release.Name }}-postgres.{{ .Release.Namespace }}.svc.cluster.local:5432/surveillance_hub"
          {{- else }}
          - name: POSTGRES_CONNECTION_URL
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: connection_url
          {{- end }}
          - name: DATABASE_URL
            value: "postgresql+psycopg2://$(POSTGRES_CONNECTION_URL)"
          {{- if ( eq .Values.hub.smtp.enabled true ) }}
          - name: SMTP_SERVER
            value: {{ .Values.hub.smtp.server | quote }}
          - name: SMTP_PORT
            value: {{ .Values.hub.smtp.port | quote }}
          - name: SMTP_SENDER_EMAIL
            value: {{ .Values.hub.smtp.sender | quote }}
          - name: SMTP_SENDER_USER
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: smtp_sender_user
          - name: SMTP_SENDER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: smtp_sender_password
         {{- end }}
          - name: API_ROOT_PATH
            value: /api
          - name: API_ROOT_URL
            value: {{ printf "http://%s-api-service:8000$(API_ROOT_PATH)" .Release.Name }}
          - name: AUTH0_DOMAIN
            value: {{ .Values.secrets.auth0.auth0_domain | quote }}
          - name: SECRETS_PASSPHRASE
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: secrets_passphrase
          - name: AUTH0_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: auth0_client_id
          - name: AUTH0_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: auth0_client_secret
          - name: AUTH0_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: auth0_audience
          - name: AUTH0_ORGANIZATION
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: auth0_organization
        {{- if ( eq .Values.hubUserKeys.enabled true ) }}
          - name: AUTH0_USER_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: auth0_user_client_id
          - name: AUTH0_USER_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: auth0_user_client_secret
         {{- end }}
          - name: RABBIT_MQ_HOST
            value: "{{ .Release.Name }}-rabbitmq"
          - name: RABBIT_MQ_USER
            value: "user"
          - name: RABBIT_MQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: qualytics-creds
                key: rabbitmq_password
#--------------------------------------------------------------------------------
# Environments that require a proxy (Http, Socks, etc..) for egress
#--------------------------------------------------------------------------------
# The simplest solution is to solve for this outside of Qualytics. For example, using
#   an istio egress configured for your proxy or another similar gateway device.
#
# However, if proxy-aware applications are required, the HTTPS_PROXY value can be set
#  below using PROXY_PROTOCOL of either: "https" or "socks5h"
#
#
          # - name: HTTPS_PROXY
          #   value: "<PROXY_PROTOCOL>://<USERNAME>:<PASSWORD>@<PROXY_IP_ADDRESS>:<PROXY_PORT>"


---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-api-service
  labels:
    app: {{ .Release.Name }}-api-service
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.hub.ingress.servicePort }}
      targetPort: {{ .Values.hub.ingress.servicePort }}
      protocol: TCP
      name: http
  selector:
    app: {{ .Release.Name }}-api