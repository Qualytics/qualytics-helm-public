apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-rabbitmq-config
data:
  enabled_plugins: |
    [rabbitmq_federation,rabbitmq_management,rabbitmq_peer_discovery_k8s].
  rabbitmq.conf: |
    default_user = user
    loopback_users.user = false
    listeners.tcp.default = 5672
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.k8s.address_type = hostname
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_formation.node_cleanup.interval = 30
    cluster_partition_handling = autoheal
    consumer_timeout = 3600000 # 60 minutes in milliseconds

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-rabbitmq

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-rabbitmq
rules:
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-rabbitmq
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Release.Name }}-rabbitmq

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-rabbitmq-cookie
type: Opaque
data:
  RABBITMQ_ERLANG_COOKIE: V0lXVkhDRFRDSVVBV0FOTE1RQVc=

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-data-claim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  {{- if and ( eq .Values.storageClass.create false ) (ne ( .Values.storageClass.name ) "") }}
  storageClassName: {{ .Values.storageClass.name }}
  {{- else if and ( eq .Values.storageClass.create true ) ( eq .Values.global.platform "aws" ) }}
  storageClassName: aws
  {{- else if and ( eq .Values.storageClass.create true ) ( eq .Values.global.platform "gcp" ) }}
  storageClassName: gcp-fast
  {{- else if and ( eq .Values.storageClass.create true ) ( eq .Values.global.platform "azure" ) }}
  storageClassName: azure-fast
  {{- end }}
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-rabbitmq
spec:
  serviceName: {{ .Release.Name }}-rabbitmq
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-rabbitmq
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-rabbitmq
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if ( eq .Values.selectors.enabled true ) }}
      nodeSelector:
        appNodes: "true"
      {{- end }}
      {{- if ( eq .Values.tolerations.enabled true ) }}
      tolerations:
        - key: appNodes
          operator: Equal
          value: "true"
          effect: NoSchedule
      {{- end }}
      serviceAccountName: {{ .Release.Name }}-rabbitmq
      initContainers:
      - name: config
        image: "{{ tpl .Values.busybox.image.imageUrl . }}:{{ .Values.busybox.image.imageTag }}"
        imagePullPolicy: IfNotPresent
        command: ['/bin/sh', '-c', 'cp /tmp/config/rabbitmq.conf /config/rabbitmq.conf && ls -l /config/ && cp /tmp/config/enabled_plugins /etc/rabbitmq/enabled_plugins']
        volumeMounts:
        - name: config
          mountPath: /tmp/config/
          readOnly: false
        - name: config-file
          mountPath: /config/
        - name: plugins-file
          mountPath: /etc/rabbitmq/
      containers:
      - name: rabbitmq
        image: "{{ tpl .Values.rabbitmq.image.imageUrl . }}:{{ .Values.rabbitmq.image.imageTag }}"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 15672
          name: discovery
        - containerPort: 5672
          name: amqp
        resources:
          requests:
            {{- with .Values.rabbitmq.resources }}
            memory: {{ .memory }}
            cpu: {{ .cpu }}
            {{- end }}
        env:
        - name: RABBIT_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: RABBITMQ_NODENAME
          value: "rabbit@$(RABBIT_POD_NAME).{{ .Release.Name }}-rabbitmq.{{ .Release.Namespace }}.svc.cluster.local"
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_CONFIG_FILE
          value: "/config/rabbitmq"
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-rabbitmq-cookie
              key: RABBITMQ_ERLANG_COOKIE
        - name: K8S_SERVICE_NAME
          value: {{ .Release.Name }}-rabbitmq
        - name: K8S_HOSTNAME_SUFFIX
          value: ".{{ .Release.Name }}-rabbitmq.{{ .Release.Namespace }}.svc.cluster.local"
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: qualytics-creds
              key: rabbitmq_password
        volumeMounts:
        - name: rabbitmq-data-pvc
          mountPath: /var/lib/rabbitmq
          readOnly: false
        - name: config-file
          mountPath: /config/
        - name: plugins-file
          mountPath: /etc/rabbitmq/
      volumes:
      - name: rabbitmq-data-pvc
        persistentVolumeClaim:
          claimName: rabbitmq-data-claim
      - name: config-file
        emptyDir: {}
      - name: plugins-file
        emptyDir: {}
      - name: config
        configMap:
          name: {{ .Release.Name }}-rabbitmq-config
          defaultMode: 0755

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-rabbitmq
  labels:
    service: {{ .Release.Name }}-rabbitmq-service
spec:
  clusterIP: None
  ports:
  - port: 15672
    targetPort: 15672
    name: discovery
  - port: 5672
    targetPort: 5672
    name: amqp
  selector:
    app: {{ .Release.Name }}-rabbitmq