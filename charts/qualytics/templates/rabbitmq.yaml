apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-rabbitmq-config
data:
  enabled_plugins: |-
{{ if and .Values.certmanager.enabled .Values.rabbitmq.tls.enabled }}
    [rabbitmq_management,rabbitmq_auth_mechanism_ssl].
{{ else }}
    [rabbitmq_management].
{{ end }}
  rabbitmq.conf: |-
    default_user = user
    loopback_users.user = false
    listeners.tcp.default = 5672
{{ if and .Values.certmanager.enabled .Values.rabbitmq.tls.enabled }}
    # TLS configuration
    listeners.ssl.default = 5671
    ssl_options.certfile   = /etc/rabbitmq/tls/tls.crt
    ssl_options.keyfile    = /etc/rabbitmq/tls/tls.key
    ssl_options.verify     = verify_peer
    ssl_options.fail_if_no_peer_cert = false
{{ end }}
    consumer_timeout = 3600000 # 60 minutes in milliseconds
    max_message_size = 536870912  # 512 mb in bytes

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-rabbitmq-cookie
type: Opaque
data:
  RABBITMQ_ERLANG_COOKIE: V0lXVkhDRFRDSVVBV0FOTE1RQVc=

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-data-claim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  {{- if and ( eq .Values.storageClass.create false ) (ne ( .Values.storageClass.name ) "") }}
  storageClassName: {{ .Values.storageClass.name }}
  {{- else if and ( eq .Values.storageClass.create true ) ( eq .Values.global.platform "aws" ) }}
  storageClassName: aws
  {{- else if and ( eq .Values.storageClass.create true ) ( eq .Values.global.platform "gcp" ) }}
  storageClassName: gcp-fast
  {{- else if and ( eq .Values.storageClass.create true ) ( eq .Values.global.platform "azure" ) }}
  storageClassName: azure-fast
  {{- end }}
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-rabbitmq
spec:
  serviceName: {{ .Release.Name }}-rabbitmq
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-rabbitmq
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-rabbitmq
    spec:
      imagePullSecrets:
        - name: regcred
      {{- if .Values.appNodeSelector }}
      nodeSelector:
        {{- toYaml .Values.appNodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations.appNodeTolerations }}
      tolerations:
        {{- toYaml .Values.tolerations.appNodeTolerations | nindent 8 }}
      {{- end }}
      initContainers:
      - name: config
        image: "{{ tpl .Values.busybox.image.imageUrl . }}:{{ .Values.busybox.image.imageTag }}"
        imagePullPolicy: IfNotPresent
        command: ['/bin/sh', '-c', 'cp /tmp/config/rabbitmq.conf /config/rabbitmq.conf && ls -l /config/ && cp /tmp/config/enabled_plugins /etc/rabbitmq/enabled_plugins']
        volumeMounts:
        - name: config
          mountPath: /tmp/config/
          readOnly: false
        - name: config-file
          mountPath: /config/
        - name: plugins-file
          mountPath: /etc/rabbitmq/
      containers:
      - name: rabbitmq
        image: "{{ tpl .Values.rabbitmq.image.imageUrl . }}:{{ .Values.rabbitmq.image.imageTag }}"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 15672
          name: discovery
        - containerPort: 5672
          name: amqp
        {{- if and .Values.rabbitmq.tls.enabled .Values.certmanager.enabled }}
        - containerPort: 5671
          name: amqp-tls
        {{- end }}
        resources:
          requests:
            {{- with .Values.rabbitmq.resources }}
            memory: {{ .memory }}
            cpu: {{ .cpu }}
            {{- end }}
        env:
        - name: RABBIT_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: RABBITMQ_NODENAME
          value: "rabbit@$(RABBIT_POD_NAME).{{ .Release.Name }}-rabbitmq.{{ .Release.Namespace }}.svc.cluster.local"
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_CONFIG_FILE
          value: "/config/rabbitmq"
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-rabbitmq-cookie
              key: RABBITMQ_ERLANG_COOKIE
        - name: K8S_SERVICE_NAME
          value: {{ .Release.Name }}-rabbitmq
        - name: K8S_HOSTNAME_SUFFIX
          value: ".{{ .Release.Name }}-rabbitmq.{{ .Release.Namespace }}.svc.cluster.local"
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: qualytics-creds
              key: rabbitmq_password
        volumeMounts:
        - name: rabbitmq-data-pvc
          mountPath: /var/lib/rabbitmq
          readOnly: false
        - name: config-file
          mountPath: /config/
        - name: plugins-file
          mountPath: /etc/rabbitmq/
        {{- if and .Values.rabbitmq.tls.enabled .Values.certmanager.enabled }}
        - name: rabbitmq-tls
          mountPath: /etc/rabbitmq/tls/
          readOnly: true
        {{- end }}
      volumes:
      - name: rabbitmq-data-pvc
        persistentVolumeClaim:
          claimName: rabbitmq-data-claim
      - name: config-file
        emptyDir: {}
      - name: plugins-file
        emptyDir: {}
      - name: config
        configMap:
          name: {{ .Release.Name }}-rabbitmq-config
          defaultMode: 0755
      {{- if and .Values.rabbitmq.tls.enabled .Values.certmanager.enabled }}
      - name: rabbitmq-tls
        secret:
          secretName: rabbitmq-tls
          defaultMode: 0400
      {{- end }}

{{- if and .Values.rabbitmq.tls.enabled .Values.certmanager.enabled }}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: rabbitmq-cert
spec:
  secretName: rabbitmq-tls
  dnsNames:
  - {{ tpl .Values.global.dnsRecord . | quote }}
  issuerRef:
    name: letsencrypt
    kind: ClusterIssuer
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-rabbitmq
  labels:
    service: {{ .Release.Name }}-rabbitmq-service
spec:
{{- if and .Values.rabbitmq.enableInbound .Values.rabbitmq.tls.enabled .Values.certmanager.enabled }}
  type: NodePort
{{- else }}
  clusterIP: None
{{- end }}
  ports:
  - port: 15672
    targetPort: 15672
    name: discovery
  - port: 5672
    targetPort: 5672
    name: amqp
  {{- if and .Values.rabbitmq.tls.enabled .Values.certmanager.enabled }}
  - port: 5671
{{- if .Values.rabbitmq.enableInbound }}
    nodePort: 30671
  {{- else }}
    targetPort: 5671
  {{- end }}
    name: amqp-tls
  {{- end }}
  selector:
    app: {{ .Release.Name }}-rabbitmq
