######------------------------------------------------------------
# Qualytics default values
######------------------------------------------------------------

#--------------------------------------------------------------------------------
# Dependencies
#--------------------------------------------------------------------------------
sparkoperator:
  enabled: true
  webhook:
    enable: true
    port: 443
    initAnnotations:
      "helm.sh/hook": pre-install
      "helm.sh/hook-weight": "50"
    cleanupAnnotations:
      "helm.sh/hook": pre-delete
      "helm.sh/hook-delete-policy": hook-succeeded
  nodeSelector:
    appNodes: "true"
  # tolerations:
  #   - key: appNodes
  #     operator: Equal
  #     value: "true"
  #     effect: NoSchedule

nginx:
  enabled: false
  controller:
    nodeSelector:
      appNodes: "true"
    # tolerations:
    #   - key: appNodes
    #     operator: Equal
    #     value: "true"
    #     effect: NoSchedule
    admissionWebhooks:
      enabled: true
      timeoutSeconds: 30
    config:
      allow-snippet-annotations: "true"
      hsts-max-age: "31536000"
    service:
      type: LoadBalancer
      externalTrafficPolicy: Local
      # annotations:
      #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
      #   service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
      #   service.beta.kubernetes.io/aws-load-balancer-type: nlb

certmanager:
  enabled: false
  registeredEmail: "devops@qualytics.co"
  installCRDs: "true"
  nodeSelector:
    appNodes: "true"
  # tolerations:
  #   - key: appNodes
  #     operator: Equal
  #     value: "true"
  #     effect: NoSchedule

#--------------------------------------------------------------------------------
# App Ingresses
#--------------------------------------------------------------------------------
ingress:
  enabled: false
  cors: false

#--------------------------------------------------------------------------------
# Global values
#--------------------------------------------------------------------------------

# Keep this for dns records and other specifics that are used across the entire app
global:
  platform: "aws"
  dnsRecord: "changeme.qualytics.io"
  imageUrls:
    firewallImageUrl: "qualyticsai/firewall-prod"
    hubImageUrl: "qualyticsai/hub-prod"
    frontendImageUrl: "qualyticsai/frontend-prod"

# Storage classes
storageClass:
  create: false
  name: ""

# Node scheduling
tolerations:
  enabled: false
selectors:
  enabled: true

# App image tags
firewallImage:
  image:
    firewallImageTag: "20240516-73f14dc"
hubImage:
  image:
    hubImageTag: "20240516-138fc88"
frontendImage:
  image:
    frontendImageTag: "20240516-5722b73"

#--------------------------------------------------------------------------------
# Firewall configuration
#--------------------------------------------------------------------------------
firewall:
  sparkVersion: "3.5.1"
  eventLog: "false"
  useCache: "true"
  useVolumes: true
  threadPoolParallelism: -1
  maxExecutors: 20
  numCoresPerExecutor: 3
  maxMemoryPerExecutor: 25000
  libpostalDataPath: "/opt/libpostal"
  driver:
    cores: 3
    coreLimit: "3800m"
    memory: "25000m"
  dynamicAllocation:
    enabled: true
    initialExecutors: 1
    minExecutors: 1
    maxExecutors: 20
  executor:
    ## Note that if dynamic allocation is enabled, the number of executors to request initially is set to the biggest
    # of .spec.dynamicAllocation.initialExecutors and .spec.executor.instances if both are set.
    instances: 1
    cores: 3
    coreLimit: "3800m"
    memory: "25000m"

#--------------------------------------------------------------------------------
# Hub configuration
#--------------------------------------------------------------------------------
hub:
  replicas: 3
  authType: "AUTH0"
  ingress:
    path: "/api/?(.*)"
    servicePort: "8000"
  resources:
    memory: "2Gi"
    cpu: "500m"
  smtp:
    enabled: true
    server: "email-smtp.us-east-1.amazonaws.com"
    sender: "no-reply@qualytics.co"
    port: "465"

hubCmd:
  resources:
    memory: "2Gi"
    cpu: "500m"

#--------------------------------------------------------------------------------
# Frontend configuration
#--------------------------------------------------------------------------------
frontend:
  replicas: 1
  ingress:
    path: "/?(.*)"
    servicePort: "8080"
  resources:
    memory: "256Mi"
    cpu: "200m"

#--------------------------------------------------------------------------------
# Postgres
#--------------------------------------------------------------------------------
postgres:
  enabled: true
  pvc:
    storageSize: "100Gi"
    backupVolumeStorageSize: "50Gi"
  image:
    imageUrl: "postgres"
    imageTag: "14"
  resources:
    memory: "12Gi"
    cpu: "2000m"

#--------------------------------------------------------------------------------
# RabbitMQ
#--------------------------------------------------------------------------------
rabbitmq:
  pvc:
    storageSize: "10Gi"
  image:
    imageUrl: "rabbitmq"
    imageTag: "3.13-management"
  resources:
    memory: "2Gi"
    cpu: "1000m"

#--------------------------------------------------------------------------------
# Busybox
#--------------------------------------------------------------------------------
busybox:
  image:
    imageUrl: "busybox"
    imageTag: "latest"

#--------------------------------------------------------------------------------
# Secrets
#--------------------------------------------------------------------------------
secrets:
  auth0: # required for authType AUTH0 (the default)
    auth0_domain: auth.qualytics.io
    auth0_audience: changeme-api
    auth0_organization: org_changeme
    auth0_spa_client_id: spa_client_id
  oidc: # required for authType OIDC
    oidc_scopes: oidc_scopes
    oidc_authorization_endpoint: oidc_authorization_endpoint
    oidc_token_endpoint: oidc_token_endpoint
    oidc_userinfo_endpoint: oidc_userinfo_endpoint
    oidc_client_id: oidc_client_id
    oidc_client_secret: oidc_client_secret
    oidc_user_id_key: oidc_user_id_key
    oidc_user_email_key: oidc_user_email_key
    oidc_user_name_key: oidc_user_name_key
    oidc_user_fname_key: oidc_user_fname_key
    oidc_user_lname_key: oidc_user_lname_key
    oidc_user_picture_key: oidc_user_picture_key
    oidc_user_provider_key: oidc_user_provider_key
  auth:
    jwt_signing_secret: ChangeMe!
  postgres:
    host: postgres
    port: 5432
    database: surveillance_hub
    username: postgres
    password: postgres
    secrets_passphrase: ChangeMe!
  smtp:
    smtp_sender_user: smtp_user
    smtp_sender_password: smtp_password
  rabbitmq:
    rabbitmq_password: ChangeMe!
