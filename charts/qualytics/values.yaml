######------------------------------------------------------------
# Qualytics default values
######------------------------------------------------------------

#--------------------------------------------------------------------------------
# Dependencies
#--------------------------------------------------------------------------------
spark-operator:
  enabled: true
  webhook:
    enable: true
    port: 443
  nodeSelector:
    appNodes: "true"
  # tolerations:
  #   - key: appNodes
  #     operator: Equal
  #     value: "true"
  #     effect: NoSchedule

ingress-nginx:
  enabled: true
  controller:
    nodeSelector:
      appNodes: "true"
    # tolerations:
    #   - key: appNodes
    #     operator: Equal
    #     value: "true"
    #     effect: NoSchedule
    admissionWebhooks:
      enabled: true
      timeoutSeconds: 30
    service:
      type: LoadBalancer
      externalTrafficPolicy: Local
      # aws specific
      # annotations:
      #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
      #   service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
      #   service.beta.kubernetes.io/aws-load-balancer-type: nlb

cert-manager:
  enabled: true
  installCRDs: "true"
  nodeSelector:
    appNodes: "true"
  # tolerations:
  #   - key: appNodes
  #     operator: Equal
  #     value: "true"
  #     effect: NoSchedule

#--------------------------------------------------------------------------------
# Ingress Nginx & Cert-manager
#--------------------------------------------------------------------------------
ingress:
  enabled: true
  certificates:
    registeredEmail: "devops@qualytics.co"

#--------------------------------------------------------------------------------
# Global values
#--------------------------------------------------------------------------------

# Keep this for dns records and other specifics that are used across the entire app
global:
  platform: "aws"
  dnsRecord: "changeme.qualytics.io"
  imageUrls:
    firewallImageUrl: "artifactory.qualytics.io:443/docker/firewall-prod"
    hubImageUrl: "artifactory.qualytics.io:443/docker/hub-prod"
    frontendImageUrl: "artifactory.qualytics.io:443/docker/frontend-prod"

# Storage classes
storageClass:
  create: true
  name: ""

# Node scheduling
tolerations:
  enabled: false
selectors:
  enabled: true

# App image tags
firewallImage:
  image:
    firewallImageTag: "20230818-ef27ee4"
hubImage:
  image:
    hubImageTag: "20230818-13a8011"
frontendImage:
  image:
    frontendImageTag: "20230818-f59316e"

# The following secrets are required
secrets:
  auth0:
    auth0_domain: auth.qualytics.io
    auth0_audience: changeme-api
    auth0_organization: org_changeme
    auth0_spa_client_id: spa_client_id
    auth0_client_id: m2m_client_id
    auth0_client_secret: m2m_client_secret
    auth0_user_client_id: m2m_user_client_id
    auth0_user_client_secret: m2m_user_client_secret
  postgres:
    connection_url: postgres:postgres@postgres:5432/surveillence_hub
    secrets_passphrase: ChangeMe!
  smtp:
    smtp_sender_user: smtp_user
    smtp_sender_password: smtp_password
  rabbitmq:
    rabbitmq_password: ChangeMe!

#--------------------------------------------------------------------------------
# Firewall configuration
#--------------------------------------------------------------------------------
firewall:
  sparkVersion: "3.4.1"
  eventLog: "false"
  useCache: "true"
  useVolumes: true
  threadPoolParallelism: -1
  maxExecutors: 20
  numCoresPerExecutor: 7
  freeDiskPerExecutor: 300
  driver:
    cores: 7
    coreLimit: "7500m"
    memory: "56000m"
  dynamicAllocation:
    enabled: true
    initialExecutors: 0
    minExecutors: 0
    maxExecutors: 20
  executor:
    ## Note that if dynamic allocation is enabled, the number of executors to request initially is set to the biggest
    # of .spec.dynamicAllocation.initialExecutors and .spec.executor.instances if both are set.
    instances: 1
    cores: 7
    coreLimit: "7500m"
    memory: "56000m"

#--------------------------------------------------------------------------------
# Hub configuration
#--------------------------------------------------------------------------------
hub:
  replicas: 3
  ingress:
    path: "/api/?(.*)"
    servicePort: "8000"
  resources:
    memory: "4Gi"
    cpu: "1000m"

hubCmd:
  resources:
    memory: "256Mi"
    cpu: "300m"

hubUserKeys:
  enabled: true

#--------------------------------------------------------------------------------
# Frontend configuration
#--------------------------------------------------------------------------------
frontend:
  replicas: 1
  ingress:
    path: "/?(.*)"
    servicePort: "8080"
  resources:
    memory: "256Mi"
    cpu: "200m"

#--------------------------------------------------------------------------------
# Postgres
#--------------------------------------------------------------------------------
# Set values for cluster install of Postgres
postgres:
  enabled: true
  pvc:
    storageSize: "100Gi"
    backupVolumeStorageSize: "50Gi"
  image:
    version: "14"
  resources:
    memory: "14Gi"
    cpu: "3000m"
