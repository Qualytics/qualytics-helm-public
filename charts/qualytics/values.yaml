######------------------------------------------------------------
# Qualytics default values
######------------------------------------------------------------

#--------------------------------------------------------------------------------
# Dependencies
#--------------------------------------------------------------------------------
sparkoperator:
  enabled: true
  prometheus:
    metrics:
      enable: false
  controller:
    nodeSelector: {}
    #   appNodes: "true"
    # tolerations:
    #   - key: appNodes
    #     operator: Equal
    #     value: "true"
    #     effect: NoSchedule
  webhook:
    enable: true
    nodeSelector: {}
    #   appNodes: "true"
    # tolerations:
    #   - key: appNodes
    #     operator: Equal
    #     value: "true"
    #     effect: NoSchedule
  spark:
    jobNamespaces:
    - "qualytics" # Set to qualytics target namespace
    serviceAccount:
      name: "qualytics-spark"

nginx:
  enabled: false
  controller:
    nodeSelector: {}
    #   appNodes: "true"
    # tolerations:
    #   - key: appNodes
    #     operator: Equal
    #     value: "true"
    #     effect: NoSchedule
    admissionWebhooks:
      enabled: true
      timeoutSeconds: 30
    config:
      annotations-risk-level: "Critical"
      allow-snippet-annotations: "true"
      hsts-max-age: "31536000"
    service:
      type: LoadBalancer
      externalTrafficPolicy: Local
      # annotations:
      #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
      #   service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
      #   service.beta.kubernetes.io/aws-load-balancer-type: nlb

certmanager:
  enabled: false
  registeredEmail: "devops@qualytics.co"
  installCRDs: "true"
  nodeSelector: {}
  #   appNodes: "true"
  # tolerations:
  #   - key: appNodes
  #     operator: Equal
  #     value: "true"
  #     effect: NoSchedule

#--------------------------------------------------------------------------------
# App Ingresses
#--------------------------------------------------------------------------------
ingress:
  enabled: false
  cors: false

#--------------------------------------------------------------------------------
# Global values
#--------------------------------------------------------------------------------

# Keep this for dns records and other specifics that are used across the entire app
global:
  platform: "aws"
  dnsRecord: "changeme.qualytics.io"
  authType: "AUTH0"
  imageUrls:
    controlplaneImageUrl: "qualyticsai/controlplane"
    dataplaneImageUrl: "qualyticsai/dataplane"
    frontendImageUrl: "qualyticsai/frontend"

# Storage classes
storageClass:
  create: false
  name: ""

# Node scheduling
appNodeSelector: {}
#   appNodes: "true"
driverNodeSelector: {}
#   driverNodes: "true"
executorNodeSelector: {}
#   executorNodes: "true"

tolerations:
  appNodeTolerations: []
  #     - key: appNodes
  #       operator: Equal
  #       value: "true"
  #       effect: NoSchedule
  driverNodeTolerations: []
  #     - key: driverNodes
  #       operator: Equal
  #       value: "true"
  #       effect: NoSchedule
  executorNodeTolerations: []
  #     - key: executorNodes
  #       operator: Equal
  #       value: "true"
  #       effect: NoSchedule

# Platform image tags
controlplaneImage:
  image:
    controlplaneImageTag: "20250506-8b25748"
dataplaneImage:
  image:
    dataplaneImageTag: "20250506-6a890cb"
frontendImage:
  image:
    frontendImageTag: "20250506-8a63dd1"

#--------------------------------------------------------------------------------
# Secrets
#--------------------------------------------------------------------------------
secrets:
  auth0: # required for authType AUTH0 (the default)
    auth0_domain: auth.qualytics.io
    auth0_audience: changeme-api
    auth0_organization: org_changeme
    auth0_spa_client_id: spa_client_id
  oidc: # required for authType OIDC
    oidc_scopes: oidc_scopes
    oidc_authorization_endpoint: oidc_authorization_endpoint
    oidc_token_endpoint: oidc_token_endpoint
    oidc_userinfo_endpoint: oidc_userinfo_endpoint
    oidc_client_id: oidc_client_id
    oidc_client_secret: oidc_client_secret
    oidc_user_id_key: oidc_user_id_key
    oidc_user_email_key: oidc_user_email_key
    oidc_user_name_key: oidc_user_name_key
    oidc_user_fname_key: oidc_user_fname_key
    oidc_user_lname_key: oidc_user_lname_key
    oidc_user_picture_key: oidc_user_picture_key
    oidc_user_provider_key: oidc_user_provider_key
    oidc_allow_insecure_transport: false
    # oidc_signer_pem_url: "https://www.digicert.com/CACerts/DigiCertGlobalRootG2.crt.pem"
  auth:
    jwt_signing_secret: ChangeMe!
  postgres:
    host: postgres
    port: 5432
    database: surveillance_hub
    username: postgres
    password: postgres
    secrets_passphrase: ChangeMe!
  smtp:
    smtp_sender_user: smtp_user
    smtp_sender_password: smtp_password
  rabbitmq:
    rabbitmq_password: ChangeMe!


#--------------------------------------------------------------------------------
# Dataplane configuration
#--------------------------------------------------------------------------------
dataplane:
  sparkVersion: "3.5.5"
  eventLog: false
  numVolumes: -1
  parallelismScaleFactor: -1
  maxParallelSyncRequests: 3
  memoryOverheadFactor: 0.1
  libpostalDataPath: "/opt/libpostal"
  driver:
    cores: 7
    memory: "55000m"
  dynamicAllocation:
    enabled: true
    initialExecutors: 1
    minExecutors: 1
    maxExecutors: 12
  executor:
    ## Note that if dynamic allocation is enabled, the number of executors to request initially is set to the biggest
    # of .spec.dynamicAllocation.initialExecutors and .spec.executor.instances if both are set.
    instances: 1
    cores: 7
    memory: "55000m"

#--------------------------------------------------------------------------------
# Controlplane configuration
#--------------------------------------------------------------------------------
controlplane:
  replicas: 6
  ingress:
    path: "/api/?(.*)"
    servicePort: "8000"
  resources:
    memory: "2Gi"
    cpu: "500m"
  smtp:
    enabled: true
    server: "email-smtp.us-east-1.amazonaws.com"
    sender: "no-reply@qualytics.co"
    port: "465"
  # Controls certificate validation for all requests, httpx, and smtp_ssl sessions
  egress:
    verifyTLSCertificates: true

controlplaneCmd:
  resources:
    memory: "2Gi"
    cpu: "500m"

#--------------------------------------------------------------------------------
# Frontend configuration
#--------------------------------------------------------------------------------
frontend:
  replicas: 1
  ingress:
    path: "/?(.*)"
    servicePort: "8080"
  resources:
    memory: "256Mi"
    cpu: "200m"

#--------------------------------------------------------------------------------
# Postgres
#--------------------------------------------------------------------------------
postgres:
  enabled: true
  pvc:
    storageSize: "100Gi"
    backupStorageSize: "50Gi"
  image:
    imageUrl: "postgres"
    imageTag: "17"
  # Use this image for auto upgrade
  # image:
  #   imageUrl: "pgautoupgrade/pgautoupgrade"
  #   imageTag: "17-bookworm"
  resources:
    memory: "10Gi"
    cpu: "2000m"
  tls:
    enabled: false  # Requires certmanager.enabled to be true

#--------------------------------------------------------------------------------
# RabbitMQ
#--------------------------------------------------------------------------------
rabbitmq:
  pvc:
    storageSize: "10Gi"
  image:
    imageUrl: "rabbitmq"
    imageTag: "4.0-management"
  resources:
    memory: "1Gi"
    cpu: "500m"
  tls:
    enabled: false  # Requires certmanager.enabled to be true
  enableInbound: false  # When true, opens AMQP-TLS on port 30671 into the cluster

#--------------------------------------------------------------------------------
# Busybox
#--------------------------------------------------------------------------------
busybox:
  image:
    imageUrl: "busybox"
    imageTag: "latest"
